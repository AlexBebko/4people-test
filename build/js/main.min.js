(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

var _showFileName = require("./modules/show-file-name.js");
var _ShowRangeValue = require("./modules/Show-range-value.js");
var _addCustomSelect = require("./modules/add-custom-select.js");
// ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------
  (0, _ShowRangeValue.showRangeValue)();
  (0, _showFileName.showFileName)();
  (0, _addCustomSelect.addCustomSelect)();

  // Modules
  // ---------------------------------

  // в load скрипты, не участвующие в работе первого экрана
  window.addEventListener('load', function () {});
});

// ---------------------------------

},{"./modules/Show-range-value.js":2,"./modules/add-custom-select.js":3,"./modules/show-file-name.js":4}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showRangeValue = showRangeValue;
var rangeInput = document.getElementById('rangeInput');
var rangeValue = document.getElementById('rangeValue');
function showRangeValue() {
  rangeValue.textContent = "".concat(rangeInput.value, " %");
  rangeInput.addEventListener('input', function () {
    rangeValue.textContent = "".concat(rangeInput.value, "%");
  });
}

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addCustomSelect = addCustomSelect;
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function addCustomSelect() {
  document.querySelectorAll('select').forEach(function (selectElement) {
    var numberOfOptions = selectElement.children.length;

    // Создаем кастомные элементы
    selectElement.classList.add('select-hidden');
    var selectWrapper = document.createElement('div');
    selectWrapper.classList.add('select');
    selectElement.parentNode.insertBefore(selectWrapper, selectElement);
    selectWrapper.appendChild(selectElement);
    var selectStyled = document.createElement('div');
    selectStyled.classList.add('select-styled');
    selectStyled.textContent = selectElement.children[0].textContent;
    selectWrapper.appendChild(selectStyled);
    var selectOptions = document.createElement('ul');
    selectOptions.classList.add('select-options');
    selectWrapper.appendChild(selectOptions);

    // Добавляем опции в список
    for (var i = 0; i < numberOfOptions; i++) {
      var optionText = selectElement.children[i].textContent;
      var optionValue = selectElement.children[i].value;
      var optionAttr = selectElement.children[i].attribute;
      var listItem = document.createElement('li');
      listItem.textContent = optionText;
      listItem.setAttribute('rel', optionValue, optionAttr);
      selectOptions.appendChild(listItem);
      if (selectElement.children[i].selected) {
        listItem.classList.add('is-selected');
      }
    }
    var listItems = selectOptions.children;

    // Обработчик события для открытия/закрытия списка опций
    selectStyled.addEventListener('click', function (e) {
      e.stopPropagation();
      var active = document.querySelector('.select-styled.active');
      if (active && active !== selectStyled) {
        active.classList.remove('active');
        active.nextElementSibling.style.display = 'none';
      }
      selectStyled.classList.toggle('active');
      selectStyled.nextElementSibling.style.display = selectStyled.classList.contains('active') ? 'block' : 'none';
    });

    // Обработчик события для выбора опции
    _toConsumableArray(listItems).forEach(function (item) {
      item.addEventListener('click', function (e) {
        e.stopPropagation();
        selectStyled.textContent = item.textContent;
        selectStyled.classList.remove('active');
        selectElement.value = item.getAttribute('rel'); // Установка значения выбранной опции в элементе <select>
        selectOptions.querySelector('.is-selected').classList.remove('is-selected');
        item.classList.add('is-selected');
        selectOptions.style.display = 'none';
      });
    });

    // Закрытие списка при клике за его пределами
    document.addEventListener('click', function () {
      selectStyled.classList.remove('active');
      selectOptions.style.display = 'none';
    });
  });
}

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showFileName = showFileName;
var inputFile = document.querySelector('.form__input-file');
function showFileName() {
  inputFile.addEventListener('change', function (e) {
    var fileName = e.target.value.split('\\').pop();
    document.getElementById('fileName').textContent = "".concat(fileName, " \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043D");
  });
}

},{}]},{},[1])


//# sourceMappingURL=main.min.js.map
